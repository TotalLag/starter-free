'use client'

import { useEffect, useState } from 'react'
import { notFound } from 'next/navigation'
import * as KitchenComponents from 'app/kitchen'

// This will be generated by our script
interface ManifestItem {
  name: string
  slug: string
  exportName: string
}

export default function ComponentTestPage({ params }: { params: { componentSlug: string } }) {
  const [manifest, setManifest] = useState<ManifestItem[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    // Dynamically import the manifest
    import('app/kitchen/manifest.json')
      .then((module) => {
        setManifest(module.default)
        setLoading(false)
      })
      .catch((err) => {
        console.error('Failed to load manifest:', err)
        setError('Failed to load component manifest. Did you run "yarn generate:kitchen"?')
        setLoading(false)
      })
  }, [])

  if (loading) {
    return <div>Loading component...</div>
  }

  if (error) {
    return <div style={{ color: 'red', padding: '20px' }}>{error}</div>
  }

  // Find the component in the manifest
  const componentEntry = manifest.find((item) => item.slug === params.componentSlug)

  if (!componentEntry) {
    return notFound()
  }

  // Get the component from the kitchen exports
  const TestbedComponent = (KitchenComponents as any)[componentEntry.exportName]

  if (!TestbedComponent) {
    return (
      <div style={{ color: 'red', padding: '20px' }}>
        Component &quot;{componentEntry.exportName}&quot; not found in kitchen exports. Make sure
        it&apos;s properly exported from packages/app/kitchen/index.ts
      </div>
    )
  }

  return <TestbedComponent />
}
